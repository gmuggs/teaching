function init(){var t=new gadgets.Prefs,e=t.getString("id");gapi.client.setApiKey(config.apiKey),gapi.client.load("calendar","v3").then(function(){gadgets.rpc.register("rsparam_set_"+e,RiseVision.Calendar.getAdditionalParams),gadgets.rpc.call("","rsparam_get",null,e,["additionalParams"])})}var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",r="color: "+e.color+"; ",i="font-size: "+e.size+"px; ",a="font-weight: "+(e.bold?"bold":"normal")+"; ",s="font-style: "+(e.italic?"italic":"normal")+"; ",o="text-decoration: "+(e.underline?"underline":"none")+"; ",u="background-color: "+e.highlightColor+"; ";return"."+t+" {"+n+r+i+a+s+o+u+"}"}function e(t){for(var e=document.createElement("style"),n=0,r=t.length;r>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,a){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?r(n.fontSetting.font.family,n.fontSetting.font.url,a):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&i(n.fontSetting.font.family,a))})}function r(t,e,n){var r=null,i="font-family: "+t+"; src: url('"+e+"');";n=n||document,r=n.styleSheets[0],null!==r&&r.addRule("@font-face",i)}function i(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}function a(t){for(var e=t.length,n=[],r=0;e>r;r++)n[r]=new Image,n[r].src=t[r]}function s(t){for(var e,n=window.location.search.substring(1),r=n.split("&"),i=0;i<r.length;i++)if(e=r[i].split("="),e[0]==t)return decodeURIComponent(e[1]);return""}return{getQueryParameter:s,getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:r,loadGoogleFont:i,preloadImages:a}}(),function(t,e,n,r){"use strict";function i(e,n){this.element=e,this.page=t(e).find(".page"),this.options=t.extend({},s,n),this._defaults=s,this._name=a,this.isLoading=!0,this.draggable=null,this.tween=null,this.calculateProgress=null,this.init()}var a="autoScroll",s={by:"continuous",speed:"medium",duration:10,pause:5,click:!1,minimumMovement:3};i.prototype={init:function(){function e(){a.tween.pause(),TweenLite.killDelayedCallsTo(a.calculateProgress),TweenLite.killDelayedCallsTo(s),TweenLite.killDelayedCallsTo(o)}var n,i,a=this,s=null,o=null,u=t(this.element).outerHeight(!0),l=u,c=this.element.scrollHeight-this.element.offsetHeight;this.calculateProgress=function(){l=t(a.element).scrollTop()+u,a.tween.progress(t(a.element).scrollTop()/c).play()},this.canScroll()?("page"===this.options.by?(n="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,i=this.page.outerHeight(!0)/t(this.element).outerHeight(!0)*n):(n="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,i=Math.abs((this.page.outerHeight(!0)-t(this.element).outerHeight(!0))/n)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,minimumMovement:a.options.minimumMovement,onPress:function(){e()},onRelease:function(){"none"!==a.options.by&&TweenLite.delayedCall(a.options.pause,a.calculateProgress)},onClick:function(){a.options.click&&(e(),t(a.element).trigger("scrollClick",[this.pointerEvent]))}}),this.draggable=Draggable.get(this.element),this.tween=TweenLite.to(this.draggable.scrollProxy,i,{scrollTop:c,ease:Linear.easeNone,delay:"page"===this.options.by?this.options.duration:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(a.draggable.scrollProxy.top())>=l&&(a.tween.pause(),l+=u,TweenLite.delayedCall(a.options.duration,o=function(){a.tween.resume()}))}:r,onComplete:function(){TweenLite.delayedCall("page"===a.options.by?a.options.duration:a.options.pause,s=function(){TweenLite.to(a.page,1,{autoAlpha:0,onComplete:function(){a.tween.seek(0).pause(),"page"===a.options.by&&(l=u),t(a.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"})):this.options.click&&(Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.95,minimumMovement:this.options.minimumMovement,onClick:function(){t(a.element).trigger("scrollClick",[this.pointerEvent])}}),this.draggable=Draggable.get(this.element))},canScroll:function(){return this.options&&this.page.height()>t(this.element).height()},destroy:function(){t.data(this.element,"plugin_"+a,null),this.tween&&this.tween.kill(),this.draggable&&this.draggable.kill(),this.element=null,this.page=null,this.options=null,this._defaults=null,this.draggable=null,this.tween=null,this.calculateProgress=null}},i.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&this.tween&&(this.isLoading?(this.tween.play(),this.isLoading=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall("page"===this.options.by?this.options.duration:this.options.pause,this.calculateProgress)))},i.prototype.pause=function(){this.tween&&(TweenLite.killDelayedCallsTo(this.calculateProgress),this.tween.pause())},t.fn.autoScroll=function(e){return this.each(function(){t.data(this,"plugin_"+a)||t.data(this,"plugin_"+a,new i(this,e))})}}(jQuery,window,document),function(t){function e(t,e,n){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:n;default:throw new Error("Implement me")}}function n(t,e){return Se.call(t,e)}function r(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function i(t){ve.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function a(t,e){var n=!0;return f(function(){return n&&(i(t),n=!1),e.apply(this,arguments)},e)}function s(t,e){gn[t]||(i(e),gn[t]=!0)}function o(t,e){return function(n){return p(t.call(this,n),e)}}function u(t,e){return function(n){return this.localeData().ordinal(t.call(this,n),e)}}function l(){}function c(t,e){e!==!1&&F(t),h(this,t),this._d=new Date(+t._d)}function d(t){var e=k(t),n=e.year||0,r=e.quarter||0,i=e.month||0,a=e.week||0,s=e.day||0,o=e.hour||0,u=e.minute||0,l=e.second||0,c=e.millisecond||0;this._milliseconds=+c+1e3*l+6e4*u+36e5*o,this._days=+s+7*a,this._months=+i+3*r+12*n,this._data={},this._locale=ve.localeData(),this._bubble()}function f(t,e){for(var r in e)n(e,r)&&(t[r]=e[r]);return n(e,"toString")&&(t.toString=e.toString),n(e,"valueOf")&&(t.valueOf=e.valueOf),t}function h(t,e){var n,r,i;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Le.length>0)for(n in Le)r=Le[n],i=e[r],"undefined"!=typeof i&&(t[r]=i);return t}function m(t){return 0>t?Math.ceil(t):Math.floor(t)}function p(t,e,n){for(var r=""+Math.abs(t),i=t>=0;r.length<e;)r="0"+r;return(i?n?"+":"":"-")+r}function _(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function g(t,e){var n;return e=j(e,t),t.isBefore(e)?n=_(t,e):(n=_(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function y(t,e){return function(n,r){var i,a;return null===r||isNaN(+r)||(s(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),a=n,n=r,r=a),n="string"==typeof n?+n:n,i=ve.duration(n,r),v(this,i,t),this}}function v(t,e,n,r){var i=e._milliseconds,a=e._days,s=e._months;r=null==r?!0:r,i&&t._d.setTime(+t._d+i*n),a&&he(t,"Date",fe(t,"Date")+a*n),s&&de(t,fe(t,"Month")+s*n),r&&ve.updateOffset(t,a||s)}function w(t){return"[object Array]"===Object.prototype.toString.call(t)}function b(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function M(t,e,n){var r,i=Math.min(t.length,e.length),a=Math.abs(t.length-e.length),s=0;for(r=0;i>r;r++)(n&&t[r]!==e[r]||!n&&T(t[r])!==T(e[r]))&&s++;return s+a}function D(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=cn[t]||dn[e]||e}return t}function k(t){var e,r,i={};for(r in t)n(t,r)&&(e=D(r),e&&(i[e]=t[r]));return i}function S(e){var n,r;if(0===e.indexOf("week"))n=7,r="day";else{if(0!==e.indexOf("month"))return;n=12,r="month"}ve[e]=function(i,a){var s,o,u=ve._locale[e],l=[];if("number"==typeof i&&(a=i,i=t),o=function(t){var e=ve().utc().set(r,t);return u.call(ve._locale,e,i||"")},null!=a)return o(a);for(s=0;n>s;s++)l.push(o(s));return l}}function T(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=e>=0?Math.floor(e):Math.ceil(e)),n}function Y(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function C(t,e,n){return oe(ve([t,11,31+e-n]),e,n).week}function O(t){return x(t)?366:365}function x(t){return t%4===0&&t%100!==0||t%400===0}function F(t){var e;t._a&&-2===t._pf.overflow&&(e=t._a[Ye]<0||t._a[Ye]>11?Ye:t._a[Ce]<1||t._a[Ce]>Y(t._a[Te],t._a[Ye])?Ce:t._a[Oe]<0||t._a[Oe]>24||24===t._a[Oe]&&(0!==t._a[xe]||0!==t._a[Fe]||0!==t._a[Ae])?Oe:t._a[xe]<0||t._a[xe]>59?xe:t._a[Fe]<0||t._a[Fe]>59?Fe:t._a[Ae]<0||t._a[Ae]>999?Ae:-1,t._pf._overflowDayOfYear&&(Te>e||e>Ce)&&(e=Ce),t._pf.overflow=e)}function A(e){return null==e._isValid&&(e._isValid=!isNaN(e._d.getTime())&&e._pf.overflow<0&&!e._pf.empty&&!e._pf.invalidMonth&&!e._pf.nullInput&&!e._pf.invalidFormat&&!e._pf.userInvalidated,e._strict&&(e._isValid=e._isValid&&0===e._pf.charsLeftOver&&0===e._pf.unusedTokens.length&&e._pf.bigHour===t)),e._isValid}function P(t){return t?t.toLowerCase().replace("_","-"):t}function L(t){for(var e,n,r,i,a=0;a<t.length;){for(i=P(t[a]).split("-"),e=i.length,n=P(t[a+1]),n=n?n.split("-"):null;e>0;){if(r=I(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&M(i,n,!0)>=e-1)break;e--}a++}return null}function I(t){var e=null;if(!Pe[t]&&Ie)try{e=ve.locale(),require("./locale/"+t),ve.locale(e)}catch(n){}return Pe[t]}function j(t,e){var n,r;return e._isUTC?(n=e.clone(),r=(ve.isMoment(t)||b(t)?+t:+ve(t))-+n,n._d.setTime(+n._d+r),ve.updateOffset(n,!1),n):ve(t).local()}function U(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function W(t){var e,n,r=t.match(Ee);for(e=0,n=r.length;n>e;e++)r[e]=_n[r[e]]?_n[r[e]]:U(r[e]);return function(i){var a="";for(e=0;n>e;e++)a+=r[e]instanceof Function?r[e].call(i,t):r[e];return a}}function E(t,e){return t.isValid()?(e=R(e,t.localeData()),fn[e]||(fn[e]=W(e)),fn[e](t)):t.localeData().invalidDate()}function R(t,e){function n(t){return e.longDateFormat(t)||t}var r=5;for(Re.lastIndex=0;r>=0&&Re.test(t);)t=t.replace(Re,n),Re.lastIndex=0,r-=1;return t}function G(t,e){var n,r=e._strict;switch(t){case"Q":return Je;case"DDDD":return Xe;case"YYYY":case"GGGG":case"gggg":return r?tn:Ve;case"Y":case"G":case"g":return nn;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return r?en:He;case"S":if(r)return Je;case"SS":if(r)return Qe;case"SSS":if(r)return Xe;case"DDD":return ze;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return qe;case"a":case"A":return e._locale._meridiemParse;case"x":return Be;case"X":return Ke;case"Z":case"ZZ":return Ze;case"T":return $e;case"SSSS":return Ne;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return r?Qe:Ge;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Ge;case"Do":return r?e._locale._ordinalParse:e._locale._ordinalParseLenient;default:return n=new RegExp(K(B(t.replace("\\","")),"i"))}}function z(t){t=t||"";var e=t.match(Ze)||[],n=e[e.length-1]||[],r=(n+"").match(un)||["-",0,0],i=+(60*r[1])+T(r[2]);return"+"===r[0]?-i:i}function V(t,e,n){var r,i=n._a;switch(t){case"Q":null!=e&&(i[Ye]=3*(T(e)-1));break;case"M":case"MM":null!=e&&(i[Ye]=T(e)-1);break;case"MMM":case"MMMM":r=n._locale.monthsParse(e,t,n._strict),null!=r?i[Ye]=r:n._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(i[Ce]=T(e));break;case"Do":null!=e&&(i[Ce]=T(parseInt(e.match(/\d{1,2}/)[0],10)));break;case"DDD":case"DDDD":null!=e&&(n._dayOfYear=T(e));break;case"YY":i[Te]=ve.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":i[Te]=T(e);break;case"a":case"A":n._isPm=n._locale.isPM(e);break;case"h":case"hh":n._pf.bigHour=!0;case"H":case"HH":i[Oe]=T(e);break;case"m":case"mm":i[xe]=T(e);break;case"s":case"ss":i[Fe]=T(e);break;case"S":case"SS":case"SSS":case"SSSS":i[Ae]=T(1e3*("0."+e));break;case"x":n._d=new Date(T(e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=z(e);break;case"dd":case"ddd":case"dddd":r=n._locale.weekdaysParse(e),null!=r?(n._w=n._w||{},n._w.d=r):n._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(n._w=n._w||{},n._w[t]=T(e));break;case"gg":case"GG":n._w=n._w||{},n._w[t]=ve.parseTwoDigitYear(e)}}function H(t){var n,r,i,a,s,o,u;n=t._w,null!=n.GG||null!=n.W||null!=n.E?(s=1,o=4,r=e(n.GG,t._a[Te],oe(ve(),1,4).year),i=e(n.W,1),a=e(n.E,1)):(s=t._locale._week.dow,o=t._locale._week.doy,r=e(n.gg,t._a[Te],oe(ve(),s,o).year),i=e(n.w,1),null!=n.d?(a=n.d,s>a&&++i):a=null!=n.e?n.e+s:s),u=ue(r,i,a,o,s),t._a[Te]=u.year,t._dayOfYear=u.dayOfYear}function N(t){var n,r,i,a,s=[];if(!t._d){for(i=Z(t),t._w&&null==t._a[Ce]&&null==t._a[Ye]&&H(t),t._dayOfYear&&(a=e(t._a[Te],i[Te]),t._dayOfYear>O(a)&&(t._pf._overflowDayOfYear=!0),r=re(a,0,t._dayOfYear),t._a[Ye]=r.getUTCMonth(),t._a[Ce]=r.getUTCDate()),n=0;3>n&&null==t._a[n];++n)t._a[n]=s[n]=i[n];for(;7>n;n++)t._a[n]=s[n]=null==t._a[n]?2===n?1:0:t._a[n];24===t._a[Oe]&&0===t._a[xe]&&0===t._a[Fe]&&0===t._a[Ae]&&(t._nextDay=!0,t._a[Oe]=0),t._d=(t._useUTC?re:ne).apply(null,s),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()+t._tzm),t._nextDay&&(t._a[Oe]=24)}}function q(t){var e;t._d||(e=k(t._i),t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],N(t))}function Z(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function $(e){if(e._f===ve.ISO_8601)return Q(e),void 0;e._a=[],e._pf.empty=!0;var n,r,i,a,s,o=""+e._i,u=o.length,l=0;for(i=R(e._f,e._locale).match(Ee)||[],n=0;n<i.length;n++)a=i[n],r=(o.match(G(a,e))||[])[0],r&&(s=o.substr(0,o.indexOf(r)),s.length>0&&e._pf.unusedInput.push(s),o=o.slice(o.indexOf(r)+r.length),l+=r.length),_n[a]?(r?e._pf.empty=!1:e._pf.unusedTokens.push(a),V(a,r,e)):e._strict&&!r&&e._pf.unusedTokens.push(a);e._pf.charsLeftOver=u-l,o.length>0&&e._pf.unusedInput.push(o),e._pf.bigHour===!0&&e._a[Oe]<=12&&(e._pf.bigHour=t),e._isPm&&e._a[Oe]<12&&(e._a[Oe]+=12),e._isPm===!1&&12===e._a[Oe]&&(e._a[Oe]=0),N(e),F(e)}function B(t){return t.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i})}function K(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function J(t){var e,n,i,a,s;if(0===t._f.length)return t._pf.invalidFormat=!0,t._d=new Date(0/0),void 0;for(a=0;a<t._f.length;a++)s=0,e=h({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=r(),e._f=t._f[a],$(e),A(e)&&(s+=e._pf.charsLeftOver,s+=10*e._pf.unusedTokens.length,e._pf.score=s,(null==i||i>s)&&(i=s,n=e));f(t,n||e)}function Q(t){var e,n,r=t._i,i=rn.exec(r);if(i){for(t._pf.iso=!0,e=0,n=sn.length;n>e;e++)if(sn[e][1].exec(r)){t._f=sn[e][0]+(i[6]||" ");break}for(e=0,n=on.length;n>e;e++)if(on[e][1].exec(r)){t._f+=on[e][0];break}r.match(Ze)&&(t._f+="Z"),$(t)}else t._isValid=!1}function X(t){Q(t),t._isValid===!1&&(delete t._isValid,ve.createFromInputFallback(t))}function te(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function ee(e){var n,r=e._i;r===t?e._d=new Date:b(r)?e._d=new Date(+r):null!==(n=je.exec(r))?e._d=new Date(+n[1]):"string"==typeof r?X(e):w(r)?(e._a=te(r.slice(0),function(t){return parseInt(t,10)}),N(e)):"object"==typeof r?q(e):"number"==typeof r?e._d=new Date(r):ve.createFromInputFallback(e)}function ne(t,e,n,r,i,a,s){var o=new Date(t,e,n,r,i,a,s);return 1970>t&&o.setFullYear(t),o}function re(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function ie(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function ae(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}function se(t,e,n){var r=ve.duration(t).abs(),i=ke(r.as("s")),a=ke(r.as("m")),s=ke(r.as("h")),o=ke(r.as("d")),u=ke(r.as("M")),l=ke(r.as("y")),c=i<hn.s&&["s",i]||1===a&&["m"]||a<hn.m&&["mm",a]||1===s&&["h"]||s<hn.h&&["hh",s]||1===o&&["d"]||o<hn.d&&["dd",o]||1===u&&["M"]||u<hn.M&&["MM",u]||1===l&&["y"]||["yy",l];return c[2]=e,c[3]=+t>0,c[4]=n,ae.apply({},c)}function oe(t,e,n){var r,i=n-e,a=n-t.day();return a>i&&(a-=7),i-7>a&&(a+=7),r=ve(t).add(a,"d"),{week:Math.ceil(r.dayOfYear()/7),year:r.year()}}function ue(t,e,n,r,i){var a,s,o=re(t,0,1).getUTCDay();return o=0===o?7:o,n=null!=n?n:i,a=i-o+(o>r?7:0)-(i>o?7:0),s=7*(e-1)+(n-i)+a+1,{year:s>0?t:t-1,dayOfYear:s>0?s:O(t-1)+s}}function le(e){var n,r=e._i,i=e._f;return e._locale=e._locale||ve.localeData(e._l),null===r||i===t&&""===r?ve.invalid({nullInput:!0}):("string"==typeof r&&(e._i=r=e._locale.preparse(r)),ve.isMoment(r)?new c(r,!0):(i?w(i)?J(e):$(e):ee(e),n=new c(e),n._nextDay&&(n.add(1,"d"),n._nextDay=t),n))}function ce(t,e){var n,r;if(1===e.length&&w(e[0])&&(e=e[0]),!e.length)return ve();for(n=e[0],r=1;r<e.length;++r)e[r][t](n)&&(n=e[r]);return n}function de(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),Y(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function fe(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function he(t,e,n){return"Month"===e?de(t,n):t._d["set"+(t._isUTC?"UTC":"")+e](n)}function me(t,e){return function(n){return null!=n?(he(this,t,n),ve.updateOffset(this,e),this):fe(this,t)}}function pe(t){return 400*t/146097}function _e(t){return 146097*t/400}function ge(t){ve.duration.fn[t]=function(){return this._data[t]}}function ye(t){"undefined"==typeof ender&&(we=De.moment,De.moment=t?a("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",ve):ve)}for(var ve,we,be,Me="2.8.4",De="undefined"!=typeof global?global:this,ke=Math.round,Se=Object.prototype.hasOwnProperty,Te=0,Ye=1,Ce=2,Oe=3,xe=4,Fe=5,Ae=6,Pe={},Le=[],Ie="undefined"!=typeof module&&module&&module.exports,je=/^\/?Date\((\-?\d+)/i,Ue=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,We=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Ee=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Re=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ge=/\d\d?/,ze=/\d{1,3}/,Ve=/\d{1,4}/,He=/[+\-]?\d{1,6}/,Ne=/\d+/,qe=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Ze=/Z|[\+\-]\d\d:?\d\d/gi,$e=/T/i,Be=/[\+\-]?\d+/,Ke=/[\+\-]?\d+(\.\d{1,3})?/,Je=/\d/,Qe=/\d\d/,Xe=/\d{3}/,tn=/\d{4}/,en=/[+-]?\d{6}/,nn=/[+-]?\d+/,rn=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,an="YYYY-MM-DDTHH:mm:ssZ",sn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],on=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],un=/([\+\-]|\d\d)/gi,ln=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),cn={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},dn={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},fn={},hn={s:45,m:45,h:22,d:26,M:11},mn="DDD w W M D d".split(" "),pn="M D H h m s w W".split(" "),_n={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return p(this.year()%100,2)},YYYY:function(){return p(this.year(),4)},YYYYY:function(){return p(this.year(),5)},YYYYYY:function(){var t=this.year(),e=t>=0?"+":"-";return e+p(Math.abs(t),6)},gg:function(){return p(this.weekYear()%100,2)},gggg:function(){return p(this.weekYear(),4)},ggggg:function(){return p(this.weekYear(),5)},GG:function(){return p(this.isoWeekYear()%100,2)},GGGG:function(){return p(this.isoWeekYear(),4)},GGGGG:function(){return p(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return T(this.milliseconds()/100)},SS:function(){return p(T(this.milliseconds()/10),2)},SSS:function(){return p(this.milliseconds(),3)},SSSS:function(){return p(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+p(T(t/60),2)+":"+p(T(t)%60,2)},ZZ:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+p(T(t/60),2)+p(T(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},x:function(){return this.valueOf()},X:function(){return this.unix()},Q:function(){return this.quarter()}},gn={},yn=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];mn.length;)be=mn.pop(),_n[be+"o"]=u(_n[be],be);for(;pn.length;)be=pn.pop(),_n[be+be]=o(_n[be],2);_n.DDDD=o(_n.DDD,3),f(l.prototype,{set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t,e,n){var r,i,a;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;12>r;r++){if(i=ve.utc([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(a="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,r;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=ve([2e3,1]).day(e),r="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(r.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e,n){var r=this._calendar[t];return"function"==typeof r?r.apply(e,[n]):r},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,r){var i=this._relativeTime[n];return"function"==typeof i?i(t,e,n,r):i.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",_ordinalParse:/\d{1,2}/,preparse:function(t){return t},postformat:function(t){return t},week:function(t){return oe(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),ve=function(e,n,i,a){var s;return"boolean"==typeof i&&(a=i,i=t),s={},s._isAMomentObject=!0,s._i=e,s._f=n,s._l=i,s._strict=a,s._isUTC=!1,s._pf=r(),le(s)},ve.suppressDeprecationWarnings=!1,ve.createFromInputFallback=a("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),ve.min=function(){var t=[].slice.call(arguments,0);return ce("isBefore",t)},ve.max=function(){var t=[].slice.call(arguments,0);return ce("isAfter",t)},ve.utc=function(e,n,i,a){var s;return"boolean"==typeof i&&(a=i,i=t),s={},s._isAMomentObject=!0,s._useUTC=!0,s._isUTC=!0,s._l=i,s._i=e,s._f=n,s._strict=a,s._pf=r(),le(s).utc()},ve.unix=function(t){return ve(1e3*t)},ve.duration=function(t,e){var r,i,a,s,o=t,u=null;return ve.isDuration(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(u=Ue.exec(t))?(r="-"===u[1]?-1:1,o={y:0,d:T(u[Ce])*r,h:T(u[Oe])*r,m:T(u[xe])*r,s:T(u[Fe])*r,ms:T(u[Ae])*r}):(u=We.exec(t))?(r="-"===u[1]?-1:1,a=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*r},o={y:a(u[2]),M:a(u[3]),d:a(u[4]),h:a(u[5]),m:a(u[6]),s:a(u[7]),w:a(u[8])}):"object"==typeof o&&("from"in o||"to"in o)&&(s=g(ve(o.from),ve(o.to)),o={},o.ms=s.milliseconds,o.M=s.months),i=new d(o),ve.isDuration(t)&&n(t,"_locale")&&(i._locale=t._locale),i},ve.version=Me,ve.defaultFormat=an,ve.ISO_8601=function(){},ve.momentProperties=Le,ve.updateOffset=function(){},ve.relativeTimeThreshold=function(e,n){return hn[e]===t?!1:n===t?hn[e]:(hn[e]=n,!0)},ve.lang=a("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return ve.locale(t,e)}),ve.locale=function(t,e){var n;return t&&(n="undefined"!=typeof e?ve.defineLocale(t,e):ve.localeData(t),n&&(ve.duration._locale=ve._locale=n)),ve._locale._abbr},ve.defineLocale=function(t,e){return null!==e?(e.abbr=t,Pe[t]||(Pe[t]=new l),Pe[t].set(e),ve.locale(t),Pe[t]):(delete Pe[t],null)},ve.langData=a("moment.langData is deprecated. Use moment.localeData instead.",function(t){return ve.localeData(t)}),ve.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return ve._locale;if(!w(t)){if(e=I(t))return e;t=[t]}return L(t)},ve.isMoment=function(t){return t instanceof c||null!=t&&n(t,"_isAMomentObject")},ve.isDuration=function(t){return t instanceof d};for(be=yn.length-1;be>=0;--be)S(yn[be]);ve.normalizeUnits=function(t){return D(t)},ve.invalid=function(t){var e=ve.utc(0/0);return null!=t?f(e._pf,t):e._pf.userInvalidated=!0,e},ve.parseZone=function(){return ve.apply(null,arguments).parseZone()},ve.parseTwoDigitYear=function(t){return T(t)+(T(t)>68?1900:2e3)},f(ve.fn=c.prototype,{clone:function(){return ve(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var t=ve(this).utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():E(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):E(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return A(this)},isDSTShifted:function(){return this._a?this.isValid()&&M(this._a,(this._isUTC?ve.utc(this._a):ve(this._a)).toArray())>0:!1},parsingFlags:function(){return f({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.zone(0,t)},local:function(t){return this._isUTC&&(this.zone(0,t),this._isUTC=!1,t&&this.add(this._dateTzOffset(),"m")),this},format:function(t){var e=E(this,t||ve.defaultFormat);return this.localeData().postformat(e)},add:y(1,"add"),subtract:y(-1,"subtract"),diff:function(t,e,n){var r,i,a,s=j(t,this),o=6e4*(this.zone()-s.zone());return e=D(e),"year"===e||"month"===e?(r=432e5*(this.daysInMonth()+s.daysInMonth()),i=12*(this.year()-s.year())+(this.month()-s.month()),a=this-ve(this).startOf("month")-(s-ve(s).startOf("month")),a-=6e4*(this.zone()-ve(this).startOf("month").zone()-(s.zone()-ve(s).startOf("month").zone())),i+=a/r,"year"===e&&(i/=12)):(r=this-s,i="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-o)/864e5:"week"===e?(r-o)/6048e5:r),n?i:m(i)},from:function(t,e){return ve.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(ve(),t)},calendar:function(t){var e=t||ve(),n=j(e,this).startOf("day"),r=this.diff(n,"days",!0),i=-6>r?"sameElse":-1>r?"lastWeek":0>r?"lastDay":1>r?"sameDay":2>r?"nextDay":7>r?"nextWeek":"sameElse";return this.format(this.localeData().calendar(i,this,ve(e)))},isLeapYear:function(){return x(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=ie(t,this.localeData()),this.add(t-e,"d")):e},month:me("Month",!0),startOf:function(t){switch(t=D(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(e){return e=D(e),e===t||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")},isAfter:function(t,e){var n;return e=D("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=ve.isMoment(t)?t:ve(t),+this>+t):(n=ve.isMoment(t)?+t:+ve(t),n<+this.clone().startOf(e))
},isBefore:function(t,e){var n;return e=D("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=ve.isMoment(t)?t:ve(t),+t>+this):(n=ve.isMoment(t)?+t:+ve(t),+this.clone().endOf(e)<n)},isSame:function(t,e){var n;return e=D(e||"millisecond"),"millisecond"===e?(t=ve.isMoment(t)?t:ve(t),+this===+t):(n=+ve(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))},min:a("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return t=ve.apply(null,arguments),this>t?this:t}),max:a("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return t=ve.apply(null,arguments),t>this?this:t}),zone:function(t,e){var n,r=this._offset||0;return null==t?this._isUTC?r:this._dateTzOffset():("string"==typeof t&&(t=z(t)),Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(n=this._dateTzOffset()),this._offset=t,this._isUTC=!0,null!=n&&this.subtract(n,"m"),r!==t&&(!e||this._changeInProgress?v(this,ve.duration(r-t,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,ve.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(t){return t=t?ve(t).zone():0,(this.zone()-t)%60===0},daysInMonth:function(){return Y(this.year(),this.month())},dayOfYear:function(t){var e=ke((ve(this).startOf("day")-ve(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=oe(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=oe(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=oe(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return C(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return C(this.year(),t.dow,t.doy)},get:function(t){return t=D(t),this[t]()},set:function(t,e){return t=D(t),"function"==typeof this[t]&&this[t](e),this},locale:function(e){var n;return e===t?this._locale._abbr:(n=ve.localeData(e),null!=n&&(this._locale=n),this)},lang:a("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return e===t?this.localeData():this.locale(e)}),localeData:function(){return this._locale},_dateTzOffset:function(){return 15*Math.round(this._d.getTimezoneOffset()/15)}}),ve.fn.millisecond=ve.fn.milliseconds=me("Milliseconds",!1),ve.fn.second=ve.fn.seconds=me("Seconds",!1),ve.fn.minute=ve.fn.minutes=me("Minutes",!1),ve.fn.hour=ve.fn.hours=me("Hours",!0),ve.fn.date=me("Date",!0),ve.fn.dates=a("dates accessor is deprecated. Use date instead.",me("Date",!0)),ve.fn.year=me("FullYear",!0),ve.fn.years=a("years accessor is deprecated. Use year instead.",me("FullYear",!0)),ve.fn.days=ve.fn.day,ve.fn.months=ve.fn.month,ve.fn.weeks=ve.fn.week,ve.fn.isoWeeks=ve.fn.isoWeek,ve.fn.quarters=ve.fn.quarter,ve.fn.toJSON=ve.fn.toISOString,f(ve.duration.fn=d.prototype,{_bubble:function(){var t,e,n,r=this._milliseconds,i=this._days,a=this._months,s=this._data,o=0;s.milliseconds=r%1e3,t=m(r/1e3),s.seconds=t%60,e=m(t/60),s.minutes=e%60,n=m(e/60),s.hours=n%24,i+=m(n/24),o=m(pe(i)),i-=m(_e(o)),a+=m(i/30),i%=30,o+=m(a/12),a%=12,s.days=i,s.months=a,s.years=o},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return m(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*T(this._months/12)},humanize:function(t){var e=se(this,!t,this.localeData());return t&&(e=this.localeData().pastFuture(+this,e)),this.localeData().postformat(e)},add:function(t,e){var n=ve.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=ve.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return t=D(t),this[t.toLowerCase()+"s"]()},as:function(t){var e,n;if(t=D(t),"month"===t||"year"===t)return e=this._days+this._milliseconds/864e5,n=this._months+12*pe(e),"month"===t?n:n/12;switch(e=this._days+Math.round(_e(this._months/12)),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:ve.fn.lang,locale:ve.fn.locale,toIsoString:a("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),n=Math.abs(this.days()),r=Math.abs(this.hours()),i=Math.abs(this.minutes()),a=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(r||i||a?"T":"")+(r?r+"H":"")+(i?i+"M":"")+(a?a+"S":""):"P0D"},localeData:function(){return this._locale}}),ve.duration.fn.toString=ve.duration.fn.toISOString;for(be in ln)n(ln,be)&&ge(be.toLowerCase());ve.duration.fn.asMilliseconds=function(){return this.as("ms")},ve.duration.fn.asSeconds=function(){return this.as("s")},ve.duration.fn.asMinutes=function(){return this.as("m")},ve.duration.fn.asHours=function(){return this.as("h")},ve.duration.fn.asDays=function(){return this.as("d")},ve.duration.fn.asWeeks=function(){return this.as("weeks")},ve.duration.fn.asMonths=function(){return this.as("M")},ve.duration.fn.asYears=function(){return this.as("y")},ve.locale("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===T(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),Ie?module.exports=ve:"function"==typeof define&&define.amd?(define("moment",function(t,e,n){return n.config&&n.config()&&n.config().noGlobal===!0&&(De.moment=we),ve}),ye(!0)):ye()}.call(this),function(t,e){"object"==typeof exports?module.exports=e(require("moment")):"function"==typeof define&&define.amd?define(["moment"],e):t.moment=e(t.moment)}(this,function(t){var e,n;return n={year:!0,month:!0,week:!0,day:!0,hour:!0,minute:!0,second:!0},e=function(){function e(e,n){this.start=t(e),this.end=t(n)}return e.prototype.clone=function(){return t().range(this.start,this.end)},e.prototype.contains=function(t,n){return t instanceof e?this.start<=t.start&&(this.end>t.end||this.end.isSame(t.end)&&!n):this.start<=t&&(this.end>t||this.end.isSame(t)&&!n)},e.prototype._by_string=function(e,n,r){var i,a;for(i=t(this.start),a=[];this.contains(i,r);)n.call(this,i.clone()),a.push(i.add(1,e));return a},e.prototype._by_range=function(e,n,r){var i,a,s,o,u;if(i=this/e,s=Math.floor(i),1/0===s)return this;for(s===i&&r&&(s-=1),u=[],a=o=0;s>=0?s>=o:o>=s;a=s>=0?++o:--o)u.push(n.call(this,t(this.start.valueOf()+e.valueOf()*a)));return u},e.prototype.overlaps=function(t){return null!==this.intersect(t)},e.prototype.intersect=function(t){var n,r,i,a,s,o,u,l;return this.start<=(r=t.start)&&r<(n=this.end)&&n<t.end?new e(t.start,this.end):t.start<(a=this.start)&&a<(i=t.end)&&i<=this.end?new e(this.start,t.end):t.start<(o=this.start)&&o<=(s=this.end)&&s<t.end?this:this.start<=(l=t.start)&&l<=(u=t.end)&&u<=this.end?t:null},e.prototype.add=function(n){return this.overlaps(n)?new e(t.min(this.start,n.start),t.max(this.end,n.end)):null},e.prototype.subtract=function(t){var n,r,i,a,s,o,u,l;return null===this.intersect(t)?[this]:t.start<=(r=this.start)&&r<(n=this.end)&&n<=t.end?[]:t.start<=(a=this.start)&&a<(i=t.end)&&i<this.end?[new e(t.end,this.end)]:this.start<(o=t.start)&&o<(s=this.end)&&s<=t.end?[new e(this.start,t.start)]:this.start<(l=t.start)&&l<(u=t.end)&&u<this.end?[new e(this.start,t.start),new e(t.end,this.end)]:void 0},e.prototype.by=function(t,e,n){return"string"==typeof t?this._by_string(t,e,n):this._by_range(t,e,n),this},e.prototype.valueOf=function(){return this.end-this.start},e.prototype.center=function(){var e;return e=this.start+this.diff()/2,t(e)},e.prototype.toDate=function(){return[this.start.toDate(),this.end.toDate()]},e.prototype.isSame=function(t){return this.start.isSame(t.start)&&this.end.isSame(t.end)},e.prototype.diff=function(t){return null==t&&(t=void 0),this.end.diff(this.start,t)},e}(),t.range=function(r,i){return r in n?new e(t(this).startOf(r),t(this).endOf(r)):new e(r,i)},t.range.constructor=e,t.fn.range=t.range,t.fn.within=function(t){return t.contains(this._d)},t}),function(){function t(t){function e(e,n,r,i,a,s){for(;a>=0&&s>a;a+=t){var o=i?i[a]:a;r=n(r,e[o],o,e)}return r}return function(n,r,i,a){r=v(r,a,4);var s=!T(n)&&y.keys(n),o=(s||n).length,u=t>0?0:o-1;return arguments.length<3&&(i=n[s?s[u]:u],u+=t),e(n,r,i,s,u,o)}}function e(t){return function(e,n,r){n=w(n,r);for(var i=S(e),a=t>0?0:i-1;a>=0&&i>a;a+=t)if(n(e[a],a,e))return a;return-1}}function n(t,e,n){return function(r,i,a){var s=0,o=S(r);if("number"==typeof a)t>0?s=a>=0?a:Math.max(a+o,s):o=a>=0?Math.min(a+1,o):a+o+1;else if(n&&a&&o)return a=n(r,i),r[a]===i?a:-1;if(i!==i)return a=e(c.call(r,s,o),y.isNaN),a>=0?a+s:-1;for(a=t>0?s:o-1;a>=0&&o>a;a+=t)if(r[a]===i)return a;return-1}}function r(t,e){var n=F.length,r=t.constructor,i=y.isFunction(r)&&r.prototype||o,a="constructor";for(y.has(t,a)&&!y.contains(e,a)&&e.push(a);n--;)a=F[n],a in t&&t[a]!==i[a]&&!y.contains(e,a)&&e.push(a)}var i=this,a=i._,s=Array.prototype,o=Object.prototype,u=Function.prototype,l=s.push,c=s.slice,d=o.toString,f=o.hasOwnProperty,h=Array.isArray,m=Object.keys,p=u.bind,_=Object.create,g=function(){},y=function(t){return t instanceof y?t:this instanceof y?(this._wrapped=t,void 0):new y(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):i._=y,y.VERSION="1.8.3";var v=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,a){return t.call(e,n,r,i,a)}}return function(){return t.apply(e,arguments)}},w=function(t,e,n){return null==t?y.identity:y.isFunction(t)?v(t,e,n):y.isObject(t)?y.matcher(t):y.property(t)};y.iteratee=function(t,e){return w(t,e,1/0)};var b=function(t,e){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var i=1;r>i;i++)for(var a=arguments[i],s=t(a),o=s.length,u=0;o>u;u++){var l=s[u];e&&void 0!==n[l]||(n[l]=a[l])}return n}},M=function(t){if(!y.isObject(t))return{};if(_)return _(t);g.prototype=t;var e=new g;return g.prototype=null,e},D=function(t){return function(e){return null==e?void 0:e[t]}},k=Math.pow(2,53)-1,S=D("length"),T=function(t){var e=S(t);return"number"==typeof e&&e>=0&&k>=e};y.each=y.forEach=function(t,e,n){e=v(e,n);var r,i;if(T(t))for(r=0,i=t.length;i>r;r++)e(t[r],r,t);else{var a=y.keys(t);for(r=0,i=a.length;i>r;r++)e(t[a[r]],a[r],t)}return t},y.map=y.collect=function(t,e,n){e=w(e,n);for(var r=!T(t)&&y.keys(t),i=(r||t).length,a=Array(i),s=0;i>s;s++){var o=r?r[s]:s;a[s]=e(t[o],o,t)}return a},y.reduce=y.foldl=y.inject=t(1),y.reduceRight=y.foldr=t(-1),y.find=y.detect=function(t,e,n){var r;return r=T(t)?y.findIndex(t,e,n):y.findKey(t,e,n),void 0!==r&&-1!==r?t[r]:void 0},y.filter=y.select=function(t,e,n){var r=[];return e=w(e,n),y.each(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r},y.reject=function(t,e,n){return y.filter(t,y.negate(w(e)),n)},y.every=y.all=function(t,e,n){e=w(e,n);for(var r=!T(t)&&y.keys(t),i=(r||t).length,a=0;i>a;a++){var s=r?r[a]:a;if(!e(t[s],s,t))return!1}return!0},y.some=y.any=function(t,e,n){e=w(e,n);for(var r=!T(t)&&y.keys(t),i=(r||t).length,a=0;i>a;a++){var s=r?r[a]:a;if(e(t[s],s,t))return!0}return!1},y.contains=y.includes=y.include=function(t,e,n,r){return T(t)||(t=y.values(t)),("number"!=typeof n||r)&&(n=0),y.indexOf(t,e,n)>=0},y.invoke=function(t,e){var n=c.call(arguments,2),r=y.isFunction(e);return y.map(t,function(t){var i=r?e:t[e];return null==i?i:i.apply(t,n)})},y.pluck=function(t,e){return y.map(t,y.property(e))},y.where=function(t,e){return y.filter(t,y.matcher(e))},y.findWhere=function(t,e){return y.find(t,y.matcher(e))},y.max=function(t,e,n){var r,i,a=-1/0,s=-1/0;if(null==e&&null!=t){t=T(t)?t:y.values(t);for(var o=0,u=t.length;u>o;o++)r=t[o],r>a&&(a=r)}else e=w(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(i>s||i===-1/0&&a===-1/0)&&(a=t,s=i)});return a},y.min=function(t,e,n){var r,i,a=1/0,s=1/0;if(null==e&&null!=t){t=T(t)?t:y.values(t);for(var o=0,u=t.length;u>o;o++)r=t[o],a>r&&(a=r)}else e=w(e,n),y.each(t,function(t,n,r){i=e(t,n,r),(s>i||1/0===i&&1/0===a)&&(a=t,s=i)});return a},y.shuffle=function(t){for(var e,n=T(t)?t:y.values(t),r=n.length,i=Array(r),a=0;r>a;a++)e=y.random(0,a),e!==a&&(i[a]=i[e]),i[e]=n[a];return i},y.sample=function(t,e,n){return null==e||n?(T(t)||(t=y.values(t)),t[y.random(t.length-1)]):y.shuffle(t).slice(0,Math.max(0,e))},y.sortBy=function(t,e,n){return e=w(e,n),y.pluck(y.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return t.index-e.index}),"value")};var Y=function(t){return function(e,n,r){var i={};return n=w(n,r),y.each(e,function(r,a){var s=n(r,a,e);t(i,r,s)}),i}};y.groupBy=Y(function(t,e,n){y.has(t,n)?t[n].push(e):t[n]=[e]}),y.indexBy=Y(function(t,e,n){t[n]=e}),y.countBy=Y(function(t,e,n){y.has(t,n)?t[n]++:t[n]=1}),y.toArray=function(t){return t?y.isArray(t)?c.call(t):T(t)?y.map(t,y.identity):y.values(t):[]},y.size=function(t){return null==t?0:T(t)?t.length:y.keys(t).length},y.partition=function(t,e,n){e=w(e,n);var r=[],i=[];return y.each(t,function(t,n,a){(e(t,n,a)?r:i).push(t)}),[r,i]},y.first=y.head=y.take=function(t,e,n){return null==t?void 0:null==e||n?t[0]:y.initial(t,t.length-e)},y.initial=function(t,e,n){return c.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},y.last=function(t,e,n){return null==t?void 0:null==e||n?t[t.length-1]:y.rest(t,Math.max(0,t.length-e))},y.rest=y.tail=y.drop=function(t,e,n){return c.call(t,null==e||n?1:e)},y.compact=function(t){return y.filter(t,y.identity)};var C=function(t,e,n,r){for(var i=[],a=0,s=r||0,o=S(t);o>s;s++){var u=t[s];if(T(u)&&(y.isArray(u)||y.isArguments(u))){e||(u=C(u,e,n));var l=0,c=u.length;for(i.length+=c;c>l;)i[a++]=u[l++]}else n||(i[a++]=u)}return i};y.flatten=function(t,e){return C(t,e,!1)},y.without=function(t){return y.difference(t,c.call(arguments,1))},y.uniq=y.unique=function(t,e,n,r){y.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=w(n,r));for(var i=[],a=[],s=0,o=S(t);o>s;s++){var u=t[s],l=n?n(u,s,t):u;e?(s&&a===l||i.push(u),a=l):n?y.contains(a,l)||(a.push(l),i.push(u)):y.contains(i,u)||i.push(u)}return i},y.union=function(){return y.uniq(C(arguments,!0,!0))},y.intersection=function(t){for(var e=[],n=arguments.length,r=0,i=S(t);i>r;r++){var a=t[r];if(!y.contains(e,a)){for(var s=1;n>s&&y.contains(arguments[s],a);s++);s===n&&e.push(a)}}return e},y.difference=function(t){var e=C(arguments,!0,!0,1);return y.filter(t,function(t){return!y.contains(e,t)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(t){for(var e=t&&y.max(t,S).length||0,n=Array(e),r=0;e>r;r++)n[r]=y.pluck(t,r);return n},y.object=function(t,e){for(var n={},r=0,i=S(t);i>r;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},y.findIndex=e(1),y.findLastIndex=e(-1),y.sortedIndex=function(t,e,n,r){n=w(n,r,1);for(var i=n(e),a=0,s=S(t);s>a;){var o=Math.floor((a+s)/2);n(t[o])<i?a=o+1:s=o}return a},y.indexOf=n(1,y.findIndex,y.sortedIndex),y.lastIndexOf=n(-1,y.findLastIndex),y.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),a=0;r>a;a++,t+=n)i[a]=t;return i};var O=function(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var a=M(t.prototype),s=t.apply(a,i);return y.isObject(s)?s:a};y.bind=function(t,e){if(p&&t.bind===p)return p.apply(t,c.call(arguments,1));if(!y.isFunction(t))throw new TypeError("Bind must be called on a function");var n=c.call(arguments,2),r=function(){return O(t,r,e,this,n.concat(c.call(arguments)))};return r},y.partial=function(t){var e=c.call(arguments,1),n=function(){for(var r=0,i=e.length,a=Array(i),s=0;i>s;s++)a[s]=e[s]===y?arguments[r++]:e[s];for(;r<arguments.length;)a.push(arguments[r++]);return O(t,n,this,this,a)};return n},y.bindAll=function(t){var e,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(e=1;r>e;e++)n=arguments[e],t[n]=y.bind(t[n],t);return t},y.memoize=function(t,e){var n=function(r){var i=n.cache,a=""+(e?e.apply(this,arguments):r);return y.has(i,a)||(i[a]=t.apply(this,arguments)),i[a]};return n.cache={},n},y.delay=function(t,e){var n=c.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},y.defer=y.partial(y.delay,y,1),y.throttle=function(t,e,n){var r,i,a,s=null,o=0;n||(n={});var u=function(){o=n.leading===!1?0:y.now(),s=null,a=t.apply(r,i),s||(r=i=null)};return function(){var l=y.now();o||n.leading!==!1||(o=l);var c=e-(l-o);return r=this,i=arguments,0>=c||c>e?(s&&(clearTimeout(s),s=null),o=l,a=t.apply(r,i),s||(r=i=null)):s||n.trailing===!1||(s=setTimeout(u,c)),a}},y.debounce=function(t,e,n){var r,i,a,s,o,u=function(){var l=y.now()-s;e>l&&l>=0?r=setTimeout(u,e-l):(r=null,n||(o=t.apply(a,i),r||(a=i=null)))};return function(){a=this,i=arguments,s=y.now();var l=n&&!r;return r||(r=setTimeout(u,e)),l&&(o=t.apply(a,i),a=i=null),o}},y.wrap=function(t,e){return y.partial(e,t)},y.negate=function(t){return function(){return!t.apply(this,arguments)}},y.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},y.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},y.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),1>=t&&(e=null),n}},y.once=y.partial(y.before,2);var x=!{toString:null}.propertyIsEnumerable("toString"),F=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(t){if(!y.isObject(t))return[];if(m)return m(t);var e=[];for(var n in t)y.has(t,n)&&e.push(n);return x&&r(t,e),e},y.allKeys=function(t){if(!y.isObject(t))return[];var e=[];for(var n in t)e.push(n);return x&&r(t,e),e},y.values=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=t[e[i]];return r},y.mapObject=function(t,e,n){e=w(e,n);for(var r,i=y.keys(t),a=i.length,s={},o=0;a>o;o++)r=i[o],s[r]=e(t[r],r,t);return s},y.pairs=function(t){for(var e=y.keys(t),n=e.length,r=Array(n),i=0;n>i;i++)r[i]=[e[i],t[e[i]]];return r},y.invert=function(t){for(var e={},n=y.keys(t),r=0,i=n.length;i>r;r++)e[t[n[r]]]=n[r];return e},y.functions=y.methods=function(t){var e=[];for(var n in t)y.isFunction(t[n])&&e.push(n);return e.sort()},y.extend=b(y.allKeys),y.extendOwn=y.assign=b(y.keys),y.findKey=function(t,e,n){e=w(e,n);for(var r,i=y.keys(t),a=0,s=i.length;s>a;a++)if(r=i[a],e(t[r],r,t))return r},y.pick=function(t,e,n){var r,i,a={},s=t;if(null==s)return a;y.isFunction(e)?(i=y.allKeys(s),r=v(e,n)):(i=C(arguments,!1,!1,1),r=function(t,e,n){return e in n},s=Object(s));for(var o=0,u=i.length;u>o;o++){var l=i[o],c=s[l];r(c,l,s)&&(a[l]=c)}return a},y.omit=function(t,e,n){if(y.isFunction(e))e=y.negate(e);else{var r=y.map(C(arguments,!1,!1,1),String);e=function(t,e){return!y.contains(r,e)}}return y.pick(t,e,n)},y.defaults=b(y.allKeys,!0),y.create=function(t,e){var n=M(t);return e&&y.extendOwn(n,e),n},y.clone=function(t){return y.isObject(t)?y.isArray(t)?t.slice():y.extend({},t):t},y.tap=function(t,e){return e(t),t},y.isMatch=function(t,e){var n=y.keys(e),r=n.length;if(null==t)return!r;for(var i=Object(t),a=0;r>a;a++){var s=n[a];if(e[s]!==i[s]||!(s in i))return!1}return!0};var A=function(t,e,n,r){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof y&&(t=t._wrapped),e instanceof y&&(e=e._wrapped);var i=d.call(t);if(i!==d.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}var a="[object Array]"===i;if(!a){if("object"!=typeof t||"object"!=typeof e)return!1;var s=t.constructor,o=e.constructor;if(s!==o&&!(y.isFunction(s)&&s instanceof s&&y.isFunction(o)&&o instanceof o)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var u=n.length;u--;)if(n[u]===t)return r[u]===e;if(n.push(t),r.push(e),a){if(u=t.length,u!==e.length)return!1;for(;u--;)if(!A(t[u],e[u],n,r))return!1}else{var l,c=y.keys(t);if(u=c.length,y.keys(e).length!==u)return!1;for(;u--;)if(l=c[u],!y.has(e,l)||!A(t[l],e[l],n,r))return!1}return n.pop(),r.pop(),!0};y.isEqual=function(t,e){return A(t,e)},y.isEmpty=function(t){return null==t?!0:T(t)&&(y.isArray(t)||y.isString(t)||y.isArguments(t))?0===t.length:0===y.keys(t).length},y.isElement=function(t){return!(!t||1!==t.nodeType)},y.isArray=h||function(t){return"[object Array]"===d.call(t)},y.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){y["is"+t]=function(e){return d.call(e)==="[object "+t+"]"}}),y.isArguments(arguments)||(y.isArguments=function(t){return y.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(t){return"function"==typeof t||!1}),y.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},y.isNaN=function(t){return y.isNumber(t)&&t!==+t},y.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===d.call(t)},y.isNull=function(t){return null===t},y.isUndefined=function(t){return void 0===t},y.has=function(t,e){return null!=t&&f.call(t,e)},y.noConflict=function(){return i._=a,this},y.identity=function(t){return t},y.constant=function(t){return function(){return t}},y.noop=function(){},y.property=D,y.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},y.matcher=y.matches=function(t){return t=y.extendOwn({},t),function(e){return y.isMatch(e,t)}},y.times=function(t,e,n){var r=Array(Math.max(0,t));e=v(e,n,1);for(var i=0;t>i;i++)r[i]=e(i);return r},y.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},y.now=Date.now||function(){return(new Date).getTime()};var P={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},L=y.invert(P),I=function(t){var e=function(e){return t[e]},n="(?:"+y.keys(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}};y.escape=I(P),y.unescape=I(L),y.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),y.isFunction(r)?r.call(t):r};var j=0;y.uniqueId=function(t){var e=++j+"";return t?t+e:e},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var U=/(.)^/,W={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},E=/\\|'|\r|\n|\u2028|\u2029/g,R=function(t){return"\\"+W[t]};y.template=function(t,e,n){!e&&n&&(e=n),e=y.defaults({},e,y.templateSettings);var r=RegExp([(e.escape||U).source,(e.interpolate||U).source,(e.evaluate||U).source].join("|")+"|$","g"),i=0,a="__p+='";t.replace(r,function(e,n,r,s,o){return a+=t.slice(i,o).replace(E,R),i=o+e.length,n?a+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?a+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(a+="';\n"+s+"\n__p+='"),e}),a+="';\n",e.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{var s=new Function(e.variable||"obj","_",a)}catch(o){throw o.source=a,o}var u=function(t){return s.call(this,t,y)},l=e.variable||"obj";return u.source="function("+l+"){\n"+a+"}",u},y.chain=function(t){var e=y(t);return e._chain=!0,e};var G=function(t,e){return t._chain?y(e).chain():e};y.mixin=function(t){y.each(y.functions(t),function(e){var n=y[e]=t[e];y.prototype[e]=function(){var t=[this._wrapped];return l.apply(t,arguments),G(this,n.apply(y,t))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=s[t];y.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],G(this,n)}}),y.each(["concat","join","slice"],function(t){var e=s[t];y.prototype[t]=function(){return G(this,e.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}.call(this);var config={apiKey:"AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY"};"undefined"!=typeof angular&&(angular.module("risevision.widget.googleCalendar.config",[]).value("defaultLayout","http://s3.amazonaws.com/widget-google-calendar/0.1.0/dist/widget.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"));var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-7"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}();var RiseVision=RiseVision||{};RiseVision.Calendar={},RiseVision.Calendar=function(t){"use strict";function e(){return"undefined"!=typeof A.data("plugin_autoScroll")?A.data("plugin_autoScroll"):null}function n(){m(),g()}function r(){var t=e();t&&(t.pause(),$("#container").autoScroll().off("done",n),t.destroy(),A.find(".page").removeAttr("style")),$(".error, .page").unwrap()}function i(){jQuery.contains(document,A[0])||($(".error, .page").wrapAll('<div id="scrollContainer">'),A=$("#scrollContainer"),A.width(O.getInt("rsW")),A.height(O.getInt("rsH"))),e()||A.autoScroll(M.scroll).on("done",n)}function a(){RiseVision.Calendar.Provider.getEventsList(M,{success:s,error:function(t){t&&t.result&&t.result.error&&(t.result.error.message&&console.log("Error retrieving calendar data: "+t.result.error.message),t.result.error.code&&-1===t.result.error.code?h():$(".error").show()),Y&&(Y=!1,p())}})}function s(t,e,n){var a,s,c,d,f,m=[],g=t.result.items;if($("#days").empty(),g.length>0){var y,w,b,D,C=[],O=moment().range(e,n);for(a=g.length-1;a>=0;a--){if(y=g[a].start.dateTime?moment(g[a].start.dateTime):moment(g[a].start.date),g[a].end.dateTime){if(w=moment(g[a].end.dateTime),y.isSame(w,"day"))continue}else w=moment(g[a].end.date);for(moment(y).isBefore(e)&&(y=moment(e).hour(y.hour()).minute(y.minute()).second(y.second()));O.contains(y)&&(y.isBefore(w)||y.isSame(w));)b={},b.start={},b.end={},b.summary=g[a].summary,b.description=g[a].description,b.location=g[a].location,D=moment(y).hour(w.hour()).minute(w.minute()).second(w.second()).format(),b.start.date=y.format(),b.end.date=D,C.push(b),y.add(1,"days");g.splice(a,1)}for(g.push.apply(g,C),g=_.sortBy(g,function(t){return t.start.dateTime?new Date(t.start.dateTime).getTime():new Date(t.start.date).getTime()});g.length>0;)T=g[0].start.dateTime?moment(g[0].start.dateTime):moment(g[0].start.date),c=_.filter(g,o),void 0===M.showCompleted||M.showCompleted||0!==T.diff(moment(),"days")||(c=_.filter(c,l)),c.length>0&&(d=new RiseVision.Calendar.Day(M),d.setEvents(c),m.push(d)),g=_.filter(g,u)}for(f=document.createDocumentFragment(),a=0,s=m.length;s>a;a++)f.appendChild(k.cloneNode(!0));for(S&&S.appendChild(f),a=0,s=m.length;s>a;a++)m[a].addDay(a);h(),r(),i(),Y?(Y=!1,p()):P||v()}function o(t){return t.start.dateTime?moment(t.start.dateTime).isSame(T,"day"):moment(t.start.date).isSame(T,"day")}function u(t){return t.start.dateTime?!moment(t.start.dateTime).isSame(T,"day"):!moment(t.start.date).isSame(T,"day")}function l(t){return t.end&&t.end.dateTime?!moment().isAfter(moment(t.end.dateTime)):!0}function c(){var t=e();return"none"!==M.scroll.by&&t&&t.canScroll()}function d(){var t;t=void 0===M.scroll.pud||M.scroll.pud<1?1e4:1e3*M.scroll.pud,D=setTimeout(function(){m(),g()},t)}function f(){D&&(clearTimeout(D),D=null)}function h(){var t=3e5;setTimeout(function(){C=!0,c()||m()},t)}function m(){C&&(C=!1,f(),a())}function p(){t.rpc.call("","rsevent_ready",null,O.getString("id"),!0,!0,!0,!0,!0)}function g(){t.rpc.call("","rsevent_done",null,O.getString("id"))}function y(t,e){if(Array.isArray(t)&&t.length>0&&"additionalParams"===t[0]&&Array.isArray(e)&&e.length>0){M=JSON.parse(e[0]);var n=[{"class":"date",fontSetting:M.dateFont},{"class":"time",fontSetting:M.timeFont},{"class":"summary",fontSetting:M.titleFont},{"class":"location",fontSetting:M.locationFont},{"class":"description",fontSetting:M.descriptionFont}];if(x.loadFonts(n),k=document.createDocumentFragment(),S=document.getElementById("days"))for(;S.firstChild;)k.appendChild(S.firstChild);F.width(O.getInt("rsW")),F.height(O.getInt("rsH")),A.width(O.getInt("rsW")),A.height(O.getInt("rsH")),a()}}function v(){var t=e();P=!1,t&&c()?t.play():d()}function w(){var t=e();P=!0,t&&c()&&t.pause(),f()}function b(){w()}var M,D,k,S,T,Y=!0,C=!1,O=new t.Prefs,x=RiseVision.Common.Utilities,F=$("#container"),A=$("#scrollContainer"),P=!0;return{getAdditionalParams:y,play:v,pause:w,stop:b}}(gadgets),function(t,e,n){"use strict";function r(){RiseVision.Calendar.play()}function i(){RiseVision.Calendar.pause()}function a(){RiseVision.Calendar.stop()}var s=new n.Prefs,o=s.getString("id");t.oncontextmenu=function(){return!1},o&&(n.rpc.register("rscmd_play_"+o,r),n.rpc.register("rscmd_pause_"+o,i),n.rpc.register("rscmd_stop_"+o,a))}(window,document,gadgets);var RiseVision=RiseVision||{};RiseVision.Calendar=RiseVision.Calendar||{},RiseVision.Calendar.Day={},RiseVision.Calendar.Day=function(t){"use strict";function e(t){r=t}function n(e){var n,i,a,s=r[0].start.dateTime?r[0].start.dateTime:r[0].start.date,o=$(".day").eq(e);for(void 0===t.showDate||t.showDate?(a="day"===t.dateRange?"Today":"week"===t.dateRange?moment(s).isSame(moment(),"day")?"Today":moment(s).format("dddd"):moment(s).format(t.dateFormat),o.find(".date").text(a)):o.find(".date").hide(),n=1,i=r.length;i>n;n++)o.find(".event:first").clone().appendTo(o.find(".events"));$.each(r,function(e,n){RiseVision.Calendar.Event.addEvent(o,e,n,t)})}var r;return{addDay:n,setEvents:e}};var RiseVision=RiseVision||{};RiseVision.Calendar=RiseVision.Calendar||{},RiseVision.Calendar.Event={},RiseVision.Calendar.Event=function(){"use strict";function t(t,e,n,r){var i=r.timeFormat,a=r.showEnd,s=0;void 0===r.showTime||r.showTime?(i="12hour"===i?"h:mma":"HH:mm",n.start&&n.end&&n.start.dateTime&&n.end.dateTime&&(void 0===a||"hour"!==a&&"extended"!==a||(s=Math.round(moment(n.end.dateTime).diff(moment(n.start.dateTime))/6e4),"hour"===a&&60===s?a="always":"extended"===a&&s>60&&(a="always")),void 0===a||"always"===a?t.find(".time").eq(e).text(moment(n.start.dateTime).format(i)+" - "+moment(n.end.dateTime).format(i)):t.find(".time").eq(e).text(moment(n.start.dateTime).format(i)))):t.find(".time").eq(e).hide(),(void 0===r.showTitle||r.showTitle)&&n.summary?t.find(".summary").eq(e).html(n.summary):t.find(".summary").eq(e).hide(),(void 0===r.showLocation||r.showLocation)&&n.location?t.find(".location").eq(e).html(n.location):t.find(".location").eq(e).hide(),(void 0===r.showDescription||r.showDescription)&&n.description?t.find(".description").eq(e).html(n.description):t.find(".description").eq(e).hide()
}return{addEvent:t}}();var RiseVision=RiseVision||{};RiseVision.Calendar=RiseVision.Calendar||{},RiseVision.Calendar.Provider={},RiseVision.Calendar.Provider=function(){"use strict";function t(t,e){var n,r=moment().hour(0).minute(0).second(0).format(),i=moment().hour(23).minute(59).second(59);switch(t.dateRange){case"day":i=i.format();break;case"week":i=i.add(6,"days").format();break;case"8days":i=i.add(7,"days").format();break;case"9days":i=i.add(8,"days").format();break;case"10days":i=i.add(9,"days").format();break;case"11days":i=i.add(10,"days").format();break;case"12days":i=i.add(11,"days").format();break;case"13days":i=i.add(12,"days").format();break;case"14days":i=i.add(13,"days").format();break;case"15days":i=i.add(14,"days").format();break;case"month":i=i.add(1,"months").format();break;case"6months":i=i.add(6,"months").format();break;case"12months":i=i.add(12,"months").format();break;default:i=i.format()}n=gapi.client.calendar.events.list({calendarId:t.calendar,singleEvents:!0,timeMin:r,timeMax:i,orderBy:"startTime"}),n.then(function(t){e&&e.success&&"function"==typeof e.success&&($.each(t.result.items,function(t,e){e.end&&e.end.date&&(e.end.date=moment(e.end.date).add(-1,"days").format("YYYY-MM-DD"))}),e.success(t,r,i))},function(t){e&&e.error&&"function"==typeof e.error&&e.error(t)})}return{getEventsList:t}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
